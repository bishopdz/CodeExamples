CREATE TRIGGER TRG_EMPLOYEE_ID BEFORE 
INSERT OR UPDATE OF EMPLOYEEID ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(EMPLOYEEID), 0) +1
    INTO :NEW.EMPLOYEEID
    FROM EMPLOYEE;
END;
/

SELECT * FROM USER_ERRORS WHERE TYPE = 'TRIGGER' AND NAME = 'TRG_EMPLOYEE_LOG';

CREATE OR REPLACE TRIGGER TRG_EMPLOYEE_LOG
AFTER INSERT OR UPDATE OR DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
    IF
    INSERTING
    THEN INSERT INTO EMPLOYEE_LOG VALUES(
    USER, SYSDATE, :NEW.EMPLOYEEID,
    'I',
    NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    :NEW.FIRSTNAME, :NEW.LASTNAME, :NEW.ADDR_LINE1, :NEW.ADDR_LINE2, :NEW.CITY, :NEW.STATE, :NEW.ZIP);
    
    ELSIF 
    UPDATING THEN
    INSERT INTO EMPLOYEE_LOG VALUES(
    USER, SYSDATE, :OLD.EMPLOYEEID, 'U', 
    :OLD.FIRSTNAME, :OLD.LASTNAME, :OLD.ADDR_LINE1, :OLD.ADDR_LINE2, :OLD.CITY,
    :OLD.STATE, :OLD.ZIP, 
    :NEW.FIRSTNAME, :NEW.LASTNAME, :NEW.ADDR_LINE1, :NEW.ADDR_LINE2, :NEW.CITY, :NEW.STATE, :NEW.ZIP);
    
    ELSIF
    DELETING
    THEN INSERT INTO EMPLOYEE_LOG VALUES(
    USER, SYSDATE, :OLD.EMPLOYEEID, 'D', 
    :OLD.FIRSTNAME, :OLD.LASTNAME, :OLD.ADDR_LINE1, :OLD.ADDR_LINE2, :OLD.CITY,
    :OLD.STATE, :OLD.ZIP, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    END IF;
END;
